"use strict";
/*!
This file is part of CycloneDX JavaScript Library.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
Copyright (c) OWASP Foundation. All Rights Reserved.
*/
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Service_bomRef;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceRepository = exports.Service = void 0;
const sortable_1 = require("../_helpers/sortable");
const tree_1 = require("../_helpers/tree");
const bomRef_1 = require("./bomRef");
const externalReference_1 = require("./externalReference");
const license_1 = require("./license");
const property_1 = require("./property");
class Service {
    constructor(name, op = {}) {
        _Service_bomRef.set(this, void 0);
        __classPrivateFieldSet(this, _Service_bomRef, new bomRef_1.BomRef(op.bomRef), "f");
        this.provider = op.provider;
        this.group = op.group;
        this.name = name;
        this.version = op.version;
        this.description = op.description;
        this.licenses = op.licenses ?? new license_1.LicenseRepository();
        this.externalReferences = op.externalReferences ?? new externalReference_1.ExternalReferenceRepository();
        this.services = op.services ?? new ServiceRepository();
        this.properties = op.properties ?? new property_1.PropertyRepository();
        this.dependencies = op.dependencies ?? new bomRef_1.BomRefRepository();
    }
    get bomRef() {
        return __classPrivateFieldGet(this, _Service_bomRef, "f");
    }
    compare(other) {
        const bomRefCompare = this.bomRef.compare(other.bomRef);
        if (bomRefCompare !== 0) {
            return bomRefCompare;
        }
        return (this.group ?? '').localeCompare(other.group ?? '') ||
            this.name.localeCompare(other.name) ||
            (this.version ?? '').localeCompare(other.version ?? '');
    }
}
exports.Service = Service;
_Service_bomRef = new WeakMap();
class ServiceRepository extends sortable_1.SortableComparables {
    *[tree_1.treeIteratorSymbol]() {
        for (const service of this) {
            yield service;
            yield* service.services[tree_1.treeIteratorSymbol]();
        }
    }
}
exports.ServiceRepository = ServiceRepository;
//# sourceMappingURL=service.js.map